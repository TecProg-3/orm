Un  **ORM (Object-Relational Mapping)** en TypeScript utilizando **Prisma** y una base de datos SQLite. Esta gu√≠a incluye cada paso del proceso con sus respectivos conceptos y objetivos.

---

## üéØ Objetivo de la clase

- Comprender qu√© es un ORM y c√≥mo Prisma permite interactuar con una base de datos desde TypeScript.
- Aprender a configurar un proyecto con TypeScript y Prisma.
- Realizar operaciones b√°sicas: crear y leer registros desde la base de datos.

---

## 1. Inicializaci√≥n del proyecto

### üõ†Ô∏è Paso 1: Configurar TypeScript

```bash
mkdir orm
npm init -y

npm install express
npm install -D typescript ts-node-dev @types/express @types/node prisma
npx tsc --init
```

Esto crea un archivo `tsconfig.json`, que define c√≥mo se compilar√° el c√≥digo TypeScript.

Se modifica el archivo para incluir las siguientes opciones:

```json
"compilerOptions": {
  "target": "ES2020",               // Nivel de JavaScript a generar
  "module": "commonjs",             // Sistema de m√≥dulos (requerido por Node.js)
  "rootDir": "src",                 // Carpeta de entrada del c√≥digo fuente
  "outDir": "dist",                 // Carpeta de salida del c√≥digo compilado
  "strict": true,                   // Habilita verificaciones estrictas de tipo
  "esModuleInterop": true          // Permite importar m√≥dulos CommonJS como ESModules
}
```

---

## 2. Inicializar Prisma

```bash
npx prisma init --datasource-provider sqlite --output ./generated/prisma
```

- **`--datasource-provider sqlite`**: Especifica que usaremos SQLite como base de datos.
- **`--output`**: Prisma generar√° el cliente en una carpeta espec√≠fica.

Esto genera:

- `schema.prisma`: Define el modelo de datos y la fuente de datos.
- `prisma/`: Carpeta con la configuraci√≥n de Prisma.
- `generated/prisma/`: Prisma generar√° aqu√≠ el cliente.

---

## 3. Definir el modelo de datos

Dentro de `schema.prisma`:

```prisma
model Persona {
  id    Int     @id @default(autoincrement()) // ID auto-incremental
  name  String?                              // Campo opcional
  edad  Int                                  // Edad como entero obligatorio
}
```

---

## 4. Crear y aplicar migraciones

```bash
npx prisma migrate dev --name init
```

Esto:

- Crea una nueva migraci√≥n (`init`).
- Genera las tablas en la base de datos SQLite.
- Actualiza el cliente Prisma autom√°ticamente.

---

## 5. Crear el archivo principal

Crea un archivo en `src/app.ts`.

Instalar el cliente Prisma:

```bash
npm install @prisma/client
```

---

## 6. C√≥digo de aplicaci√≥n

### `src/app.ts`

```ts
import { PrismaClient } from '../prisma/generated/prisma'

const prisma = new PrismaClient()

async function main() {
  try {
    // Crear un nuevo registro en la tabla Persona
    const user = await prisma.persona.create({
      data: {
        name: 'Maria',
        edad: 20,
      },
    })
    console.log(user)

    // Consultar todos los registros
    const users = await prisma.persona.findMany()
    console.log(users)

  } catch (e) {
    console.error(e)
    await prisma.$disconnect()
  } finally {
    await prisma.$disconnect()
  }
}

main()
```

---

## 7. Ejecutar el c√≥digo

Usamos `ts-node-dev` para ejecutar el proyecto con recarga en caliente:

```bash
npx ts-node-dev src/app.ts
```

---

## 8. Buscar un registro √∫nico: `findUnique`

El m√©todo `findUnique` permite buscar un √∫nico registro usando una clave √∫nica, en este caso el `id` de la persona.

```ts
const persona = await prisma.persona.findUnique({
  where: { id: 1 }, // Busca a la persona con id = 1
})

console.log('√∫nica persona:', persona)
```

- **Importante**: `findUnique` requiere un campo √∫nico (como `id` o un campo que tenga `@unique` en el modelo Prisma).

---

## 2. Actualizar un registro: `update`

El m√©todo `update` sirve para modificar los valores de un registro existente.

```ts
const persona = await prisma.persona.update({
  where: { id: 1 }, // Especifica qu√© registro actualizar
  data: { 
    name: 'Maria Actualizada',
    edad: 21
  },
})

console.log('Usuario actualizado:', persona)
```

- **Nota**: Si no se encuentra el registro, Prisma lanzar√° una excepci√≥n.

---

## 3. Eliminar un registro: `delete`

El m√©todo `delete` elimina un registro de la base de datos.

```ts
const persona = await prisma.persona.delete({
  where: { id: 1 }, // Especifica qu√© registro eliminar
})

console.log('Persona eliminada:', persona)
```

- **Advertencia**: El registro se elimina permanentemente.

---

**Tabla comparativa entre Prisma y SQL tradicional**
---

### üìä Tabla Comparativa: Prisma ORM vs SQL Tradicional

| Operaci√≥n                     | Prisma (TypeScript)                                                      | SQL Tradicional (SQLite)                                     |
| ----------------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------ |
| **Crear (INSERT)**            | ```await prisma.persona.create({data: {name:'Maria', edad: 20}})```      | ```INSERT INTO Persona (name, edad) VALUES ('Maria', 20);``` |
| **Leer todos (SELECT)**       | ```await prisma.persona.findMany()```                                    | ```SELECT * FROM Persona;```                                 |
| **Leer uno (SELECT + WHERE)** | ```await prisma.persona.findUnique({where: {id: 1 }})```                 | ```SELECT * FROM Persona WHERE id = 1;```                    |
| **Actualizar (UPDATE)**       | ```await prisma.persona.update({where: { id: 1 },data: { edad: 25}\})``` | ```UPDATE Persona SET edad = 25 WHERE id = 1;```             |
| **Eliminar (DELETE)**         | ```await prisma.persona.delete({where: { id: 1 }})```                    | ```DELETE FROM Persona WHERE id = 1;```                      |

---

### üß† Claves

- Prisma traduce cada operaci√≥n a una consulta SQL, pero de forma **tipada y segura**.
- Ayuda a evitar errores de sintaxis y posibles vulnerabilidades (como **inyecciones SQL**).
- La experiencia del desarrollador mejora con **autocompletado**, **validaciones en tiempo de compilaci√≥n** y **documentaci√≥n integrada**.

---

# Practica:

## üß© Ejercicio 1

### **T√≠tulo**: Inserci√≥n y lectura simple

**Objetivo**: Insertar un nuevo registro en la tabla `Persona` y listar todos los registros.

**Instrucciones**:

1. Crear una nueva persona con nombre y edad.
2. Listar todas las personas con `findMany()`.
3. Imprimir los resultados en consola.

**Puntos clave**:

- Familiarizarse con `create` y `findMany`.
- Observar el efecto inmediato de las operaciones.

---

## üß© Ejercicio 2

### **T√≠tulo**: Actualizaci√≥n condicional

**Objetivo**: Buscar una persona por ID y, si existe, aumentar su edad en +1. Si no existe, mostrar un mensaje.

**Instrucciones**:

1. Usar `findUnique` para buscar la persona.
2. Si la persona existe, usar `update` para incrementar su edad.
3. Imprimir el resultado actualizado.
4. Si no existe, mostrar `"Persona no encontrada"`.

**Puntos clave**:

- L√≥gica condicional en base a `null`.
- Aplicaci√≥n de `update` con valores din√°micos (`edad + 1`).

---

## üß© **Ejercicio 3**

**Objetivo**: Implementar todas las operaciones CRUD y manejar errores comunes (como actualizar o eliminar un ID inexistente).

**Instrucciones**:

1. Crear una persona.
2. Listar todas las personas.
3. Buscar una persona por ID.
4. Actualizar los datos de esa persona.
5. Eliminar la persona.
6. Manejar errores si se intenta actualizar o eliminar una persona que no existe.

**Puntos clave**:

- Uso de `try/catch`.
- Validaci√≥n previa de existencia (`findUnique` antes de `update/delete`).
- Mostrar mensajes claros en consola.

---
